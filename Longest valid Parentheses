Given a string s consisting of opening and closing parenthesis '(' and ')'. Find the length of the longest valid parenthesis substring.

A parenthesis string is valid if:

    For every opening parenthesis, there is a closing parenthesis.
    The closing parenthesis must be after its opening parenthesis.

Examples :

Input: s = "((()"
Output: 2
Explanation: The longest valid parenthesis substring is "()".

Input: s = ")()())"
Output: 4
Explanation: The longest valid parenthesis substring is "()()".

Input: s = "())()"
Output: 2
Explanation: The longest valid parenthesis substring is "()".

Constraints:
1 ≤ s.size() ≤ 106  
s consists of '(' and ')' only


for left and right scan ( and ) 
class Solution {
  public:
    int maxLength(string& s) {
        // code here
        
        int maxlen=0;
        // stack<int>st;
        int count1=0;
        int count2=0;
        for(int i=0;i<s.size();i++){
            if(s[i]=='('){
                count1++;
            }
            else if(s[i]==')'){
                count2++;
            }
            
            if(count1<count2){
                count1=0;
                count2=0;
            }
            if(count1==count2){
                maxlen=max(maxlen,count1+count2);
            }
        }
        
        count1=0;
        count2=0;
          for(int i=s.size()-1;i>=0;i--){
            if(s[i]=='('){
                count1++;
            }
            else if(s[i]==')'){
                count2++;
            }
            
            if(count1>count2){
                count1=0;
                count2=0;
            }
            if(count1==count2){
                maxlen=max(maxlen,count1+count2);
            }
        }
        
        
        
        return maxlen;
    }
};
