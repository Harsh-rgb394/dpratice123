Given q queries, You task is to implement the following four functions for a stack:

    push(x) – Insert an integer x onto the stack.
    pop() – Remove the top element from the stack.
    peek() - Return the top element from the stack. If the stack is empty, return -1.
    getMin() – Retrieve the minimum element from the stack in O(1) time. If the stack is empty, return -1.

Each query can be one of the following:

    1 x : Push x onto the stack.
    2 : Pop the top element from the stack.
    3: Return the top element from the stack. If the stack is empty, return -1.
    4: Return the minimum element from the stack.

Examples:

Input: q = 7, queries = [[1, 2], [1, 3], [3], [2], [4], [1, 1], [4]]
Output: [3, 2, 1]
Explanation: 
push(2): Stack is [2]
push(3): Stack is [2, 3]
peek(): Top element is 3
pop(): Removes 3, stack is [2]
getMin(): Minimum element is 2
push(1): Stack is [2, 1]
getMin(): Minimum element is 1



class Solution {
    stack<pair<int,int>>st;
    public:
    Solution() {
        
    }

    // Add an element to the top of Stack
    void push(int x) {
        // code here
        if(st.empty()){
        st.push({x,x});

        }
        else{
            int curretmin=st.top().second;
            st.push({x,min(x,curretmin)});
        }
    }

    // Remove the top element from the Stack
    void pop() {
        // code here
        if(!st.empty()){
            st.pop();
            
        }
    }

    // Returns top element of the Stack
    int peek() {
        // code here
        // int x;
        if(!st.empty()){
            return st.top().first;
        }
        return -1;
    }

    // Finds minimum element of Stack
    int getMin() {
        // code here
        if(!st.empty()){
        return st.top().second;
        }
            return -1;
        
    }
};
