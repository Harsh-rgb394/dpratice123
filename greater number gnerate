Given an array arr[ ] of integers, the task is to find the next greater element for each element of the array in order of their appearance in the array. Next greater element of an element in the array is the nearest element on the right which is greater than the current element.
If there does not exist next greater of current element, then next greater element for current element is -1. For example, next greater of the last element is always -1.

Examples

Input: arr[] = [1, 3, 2, 4]
Output: [3, 4, 4, -1]
Explanation: The next larger element to 1 is 3, 3 is 4, 2 is 4 and for 4, since it doesn't exist, it is -1.


vector<int>ans;
        stack<int>st;
        
        for(int i=arr.size()-1;i>=0;i--){
            if(st.empty()){
                st.push(arr[i]);
                ans.push_back(-1);
            }
            else if(st.top()>arr[i]){
               ans.push_back(st.top());
                st.push(arr[i]);
            }
here remeber on thing that alayws check stack is empty or not before poping evering elemnt smaler or eqyal to top varan gives segemenration error 
and after if it empty then check or push or insert -1 or false value something
            else {
                while(!st.empty() && st.top()<=arr[i]){
                    st.pop();
                }
                 if(st.empty()){
                     ans.push_back(-1);
                 }
                 else{
                     
                ans.push_back(st.top());
                 }
                st.push(arr[i]);
            }
        }
        
       reverse(ans.begin(),ans.end());
        return ans;
        // not optimal 2 loop 
        // for(int i=0;i<arr.size();i++){
        //     bool flag=true;
        //     for(int j=i+1;j<arr.size();j++){
        //         if(arr[i]<arr[j]){
        //             flag=false;
        //             ans.push_back(arr[j]);
        //             break;
        //         }
        //     }
        //     if(flag){
        //         ans.push_back(-1);
        //     }
        // }
        
        // return ans;
